/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ooc.gui;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import ooc.Books;
import ooc.DBConnector;
import ooc.Reservations;

/**
 *
 * @author Kevin
 */
public class LibrarianPage extends javax.swing.JFrame {

    Connection conn = null;
    PreparedStatement pststmt = null;
    ResultSet rs = null;
    
    public LibrarianPage() {
        initComponents();
        showBookList();
        showReserveList();
    }
    
    public static String getCurDate() {
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        Date date = Calendar.getInstance().getTime();
        String Date = df.format(date);
        return Date;
    }
    public static String getDueDate() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Calendar c = Calendar.getInstance();
        c.setTime(new Date());
        c.add(Calendar.DATE, 7);
        String output = sdf.format(c.getTime());
        return output;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        librarianPagePanel = new javax.swing.JPanel();
        navBarPanel = new javax.swing.JPanel();
        navLabel = new javax.swing.JLabel();
        checkBook = new javax.swing.JButton();
        issueBook = new javax.swing.JButton();
        returnBook = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        resultPanel = new javax.swing.JPanel();
        checkBookPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_showBookList = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        bookField = new javax.swing.JTextField();
        isbnTextField = new javax.swing.JTextField();
        titleTextField = new javax.swing.JTextField();
        authorTextField = new javax.swing.JTextField();
        genreTextField = new javax.swing.JTextField();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        issueBookPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        issueTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField_BookID = new javax.swing.JTextField();
        jTextField_StudentID = new javax.swing.JTextField();
        jTextField_ISBN = new javax.swing.JTextField();
        jTextField_Title = new javax.swing.JTextField();
        issueButton = new javax.swing.JButton();
        returnBookPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        studentIDField = new javax.swing.JTextField();
        bookIDTextField = new javax.swing.JTextField();
        returnBookButton = new javax.swing.JButton();
        jLabel_overDue = new javax.swing.JLabel();
        jLabel_totalFee = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(700, 584));
        setMinimumSize(new java.awt.Dimension(700, 584));

        librarianPagePanel.setBackground(new java.awt.Color(255, 255, 255));
        librarianPagePanel.setMaximumSize(new java.awt.Dimension(700, 584));
        librarianPagePanel.setMinimumSize(new java.awt.Dimension(700, 584));

        navLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        navLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        navLabel.setText("Navigation Panel");

        checkBook.setText("Check Books");
        checkBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBookActionPerformed(evt);
            }
        });

        issueBook.setText("Issue Books");
        issueBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueBookActionPerformed(evt);
            }
        });

        returnBook.setText("Return Books");
        returnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBookActionPerformed(evt);
            }
        });

        logoutButton.setText("LogOut");
        logoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout navBarPanelLayout = new javax.swing.GroupLayout(navBarPanel);
        navBarPanel.setLayout(navBarPanelLayout);
        navBarPanelLayout.setHorizontalGroup(
            navBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, navBarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(navBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(logoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(returnBook, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(issueBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(navLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        navBarPanelLayout.setVerticalGroup(
            navBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(navBarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(navLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(checkBook)
                .addGap(18, 18, 18)
                .addComponent(issueBook)
                .addGap(18, 18, 18)
                .addComponent(returnBook)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        resultPanel.setBackground(new java.awt.Color(0, 204, 204));
        resultPanel.setLayout(new java.awt.CardLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Check Books (Add, Update, Delete)");

        jTable_showBookList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable_showBookList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_showBookListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_showBookList);

        jLabel1.setText("Book ID:");

        jLabel5.setText("ISBN:");

        jLabel6.setText("Title:");

        jLabel7.setText("Author:");

        jLabel8.setText("Genre:");

        updateButton.setText("Update");
        updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateButtonMouseClicked(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteButtonMouseClicked(evt);
            }
        });

        jButton3.setText("Add");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout checkBookPanelLayout = new javax.swing.GroupLayout(checkBookPanel);
        checkBookPanel.setLayout(checkBookPanelLayout);
        checkBookPanelLayout.setHorizontalGroup(
            checkBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkBookPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(checkBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                    .addGroup(checkBookPanelLayout.createSequentialGroup()
                        .addGroup(checkBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(checkBookPanelLayout.createSequentialGroup()
                                .addGroup(checkBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addGroup(checkBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(bookField)
                                    .addComponent(isbnTextField)
                                    .addComponent(titleTextField)
                                    .addComponent(authorTextField)
                                    .addComponent(genreTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))
                                .addGap(74, 74, 74)
                                .addGroup(checkBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        checkBookPanelLayout.setVerticalGroup(
            checkBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkBookPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(checkBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(bookField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateButton))
                .addGap(18, 18, 18)
                .addGroup(checkBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(isbnTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton))
                .addGap(18, 18, 18)
                .addGroup(checkBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(titleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addGap(18, 18, 18)
                .addGroup(checkBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(authorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(checkBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(genreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        resultPanel.add(checkBookPanel, "card2");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Issue a Book");

        issueTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Book ID", "Student ID", "ISBN", "Title"
            }
        ));
        issueTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                issueTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(issueTable);

        jLabel9.setText("BookID:");

        jLabel10.setText("StudentID:");

        jLabel11.setText("ISBN:");

        jLabel12.setText("Title:");

        issueButton.setText("Issue");
        issueButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                issueButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout issueBookPanelLayout = new javax.swing.GroupLayout(issueBookPanel);
        issueBookPanel.setLayout(issueBookPanelLayout);
        issueBookPanelLayout.setHorizontalGroup(
            issueBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(issueBookPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(issueBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addGroup(issueBookPanelLayout.createSequentialGroup()
                        .addGroup(issueBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addGap(32, 32, 32)
                        .addGroup(issueBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField_BookID)
                            .addComponent(jTextField_StudentID)
                            .addComponent(jTextField_ISBN)
                            .addComponent(jTextField_Title)
                            .addComponent(issueButton, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))))
                .addContainerGap(49, Short.MAX_VALUE))
        );
        issueBookPanelLayout.setVerticalGroup(
            issueBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(issueBookPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(issueBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField_BookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(issueBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextField_StudentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(issueBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextField_ISBN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(issueBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jTextField_Title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(issueButton)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        resultPanel.add(issueBookPanel, "card2");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Return Book");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel13.setText("BookID:");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel14.setText("StudentID:");

        studentIDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentIDFieldActionPerformed(evt);
            }
        });

        returnBookButton.setText("Return Book");
        returnBookButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                returnBookButtonMouseClicked(evt);
            }
        });

        jLabel_overDue.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel_totalFee.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        javax.swing.GroupLayout returnBookPanelLayout = new javax.swing.GroupLayout(returnBookPanel);
        returnBookPanel.setLayout(returnBookPanelLayout);
        returnBookPanelLayout.setHorizontalGroup(
            returnBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(returnBookPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(returnBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(returnBookPanelLayout.createSequentialGroup()
                        .addGroup(returnBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(returnBookPanelLayout.createSequentialGroup()
                                .addGroup(returnBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel13))
                                .addGap(51, 51, 51)
                                .addGroup(returnBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(bookIDTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                                    .addComponent(studentIDField)
                                    .addComponent(returnBookButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(returnBookPanelLayout.createSequentialGroup()
                        .addComponent(jLabel_overDue, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addComponent(jLabel_totalFee, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))))
        );
        returnBookPanelLayout.setVerticalGroup(
            returnBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(returnBookPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(62, 62, 62)
                .addGroup(returnBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(bookIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(67, 67, 67)
                .addGroup(returnBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(studentIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addComponent(returnBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                .addGroup(returnBookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel_totalFee, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                    .addComponent(jLabel_overDue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(66, 66, 66))
        );

        resultPanel.add(returnBookPanel, "card2");

        javax.swing.GroupLayout librarianPagePanelLayout = new javax.swing.GroupLayout(librarianPagePanel);
        librarianPagePanel.setLayout(librarianPagePanelLayout);
        librarianPagePanelLayout.setHorizontalGroup(
            librarianPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(librarianPagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(navBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(resultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        librarianPagePanelLayout.setVerticalGroup(
            librarianPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(librarianPagePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(librarianPagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(navBarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(librarianPagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(librarianPagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBookActionPerformed
        // TODO add your handling code here:

        //removeing panels
        resultPanel.removeAll();
        resultPanel.repaint();
        resultPanel.revalidate();
        //adding panels
        resultPanel.add(checkBookPanel);
        resultPanel.repaint();
        resultPanel.revalidate();
    }//GEN-LAST:event_checkBookActionPerformed

    private void issueBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issueBookActionPerformed
        // TODO add your handling code here:
        //removeing panels
        resultPanel.removeAll();
        resultPanel.repaint();
        resultPanel.revalidate();
        //adding panels
        resultPanel.add(issueBookPanel);
        resultPanel.repaint();
        resultPanel.revalidate();
    }//GEN-LAST:event_issueBookActionPerformed
    
    public ArrayList<Books> getBookList() {
        ArrayList<Books> bookList = new ArrayList<Books>();
        String query = "select * from book";
        try {
                conn = DBConnector.connectDB();
                pststmt = conn.prepareStatement(query);
            
                rs = pststmt.executeQuery();
                
                Books book;
                
                while (rs.next()) {
                    book = new Books(
                        rs.getString("book_id"),
                        rs.getString("isbn"),
                        rs.getString("title"),
                        rs.getString("author_name"),
                        rs.getString("genre"),
                        rs.getString("availability")
                    );
                    bookList.add(book);
                }
            
        } catch (Exception e) {
                e.printStackTrace();
        }
        return bookList;
    }
    
    public void showBookList() {
        
        ArrayList<Books> books = getBookList();
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[] {"Book ID","ISBN","Title","Author Name","Genre","Availability"});
        Object[] row = new Object[6];
        
        for (int i = 0; i < books.size(); i++) {
            row[0] = books.get(i).getBook_Id();
            row[1] = books.get(i).getIsbn();
            row[2] = books.get(i).getTitle();
            row[3] = books.get(i).getAuthor_Name();
            row[4] = books.get(i).getGenre();
            row[5] = books.get(i).getAvailability();
            model.addRow(row);
        }
        jTable_showBookList.setModel(model);
    }
    
    public void executeSQL(String query, String message) {
        Connection conn = DBConnector.connectDB();
        PreparedStatement pststmt;
        
        try {
            pststmt = conn.prepareStatement(query);
            if ((pststmt.executeUpdate()) == 1) {
                DefaultTableModel model = (DefaultTableModel)jTable_showBookList.getModel();
                model.setRowCount(0);
                showBookList();
                
                JOptionPane.showMessageDialog(null, "Data " + message + " Successfully");
            } else {
                JOptionPane.showMessageDialog(null, "Data Not " + message);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void returnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBookActionPerformed
        // TODO add your handling code here:
        //removeing panels
        resultPanel.removeAll();
        resultPanel.repaint();
        resultPanel.revalidate();
        //adding panels
        resultPanel.add(returnBookPanel);
        resultPanel.repaint();
        resultPanel.revalidate();
    }//GEN-LAST:event_returnBookActionPerformed

    private void logoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseClicked
        // TODO add your handling code here:
        SignIn signin = new SignIn();
        signin.setVisible(true);
        dispose();
    }//GEN-LAST:event_logoutButtonMouseClicked
    
    
    public ArrayList<Reservations> getReservation() {
        ArrayList<Reservations> reserveList = new ArrayList<Reservations>();
        String query = "select * from reservation";
        try {
                conn = DBConnector.connectDB();
                pststmt = conn.prepareStatement(query);
                rs = pststmt.executeQuery();
                
                Reservations reserve;
                
                while (rs.next()) {
                    reserve = new Reservations(
                            rs.getString("book_id"),
                            rs.getString("id"),
                            rs.getString("isbn"),
                            rs.getString("title")
                    );
                    reserveList.add(reserve);
                }
                
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return reserveList;
    }
    public boolean checkUser() {
        
        String query = "select * from student where rb_id='" + jTextField_StudentID.getText() + "'";
        int count = 0;
        try {
            Connection conn = DBConnector.connectDB();
            PreparedStatement pst = conn.prepareStatement(query);
            ResultSet rs = pst.executeQuery();
            
            while (rs.next()) {
                count++;
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (count <= 3)
            return true;
        return false;
    }
    
    
    public void showReserveList() {
        ArrayList<Reservations> reserves = getReservation();
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[] {"Book ID","Student ID","ISBN","Title"});
        Object[] row = new Object[4];
        
        for (int i = 0; i < reserves.size(); i++) {
            row[0] = reserves.get(i).getBookID();
            row[1] = reserves.get(i).getID();
            row[2] = reserves.get(i).getIsbn();
            row[3] = reserves.get(i).getTitle();
            model.addRow(row);
        }
        issueTable.setModel(model);
    }
    
   
    
    private void issueTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issueTableMouseClicked

        int i = issueTable.getSelectedRow();
        TableModel model = issueTable.getModel();
        jTextField_BookID.setText(model.getValueAt(i,0).toString());
        jTextField_StudentID.setText(model.getValueAt(i,1).toString());
        jTextField_ISBN.setText(model.getValueAt(i,2).toString());
        jTextField_Title.setText(model.getValueAt(i,3).toString());
                
    }//GEN-LAST:event_issueTableMouseClicked
    
    
    private void jTable_showBookListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_showBookListMouseClicked
        // TODO add your handling code here:
        int i = jTable_showBookList.getSelectedRow();
        TableModel model = jTable_showBookList.getModel();
        bookField.setText(model.getValueAt(i,0).toString());
        isbnTextField.setText(model.getValueAt(i,1).toString());
        titleTextField.setText(model.getValueAt(i,2).toString());
        authorTextField.setText(model.getValueAt(i,3).toString());
        genreTextField.setText(model.getValueAt(i,4).toString());
        
        
    }//GEN-LAST:event_jTable_showBookListMouseClicked

    private void updateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseClicked
        // TODO add your handling code here:
        try {
            String query = "update book set isbn='"+isbnTextField.getText()+"',"
                    + "title='"+titleTextField.getText()+"',author_name='"+authorTextField.getText()+"',genre='"+genreTextField.getText()+"' where book_id="+bookField.getText();
            executeSQL(query, "Updated");
                
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_updateButtonMouseClicked

    private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
        // TODO add your handling code here:
        try {
            String query = "delete from book where book_id=" + bookField.getText();
            executeSQL(query, "Deleted");
                
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_deleteButtonMouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        try {
            String query = "insert into book (isbn,title,author_name,genre) "
                    + "values ('"+isbnTextField.getText()+"','"+titleTextField.getText()+"','"+authorTextField.getText()+"','"+genreTextField.getText()+"')";
            executeSQL(query, "Inserted");
                
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3MouseClicked

    private void issueButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issueButtonMouseClicked
        // TODO add your handling code here:
        if (checkUser() == true) {
            try {
                Connection conn = DBConnector.connectDB();
                String query = "insert into student (rb_id,book_id,isbn,title,day_of_issue,due_date) values (?,?,?,?,?,?)";
                String dQuery = "delete from reservation where book_id='" + jTextField_BookID.getText()+"'";
                PreparedStatement pststmt = conn.prepareStatement(query);

                pststmt.setString(1, jTextField_StudentID.getText());
                pststmt.setString(2, jTextField_BookID.getText());
                pststmt.setString(3, jTextField_ISBN.getText());
                pststmt.setString(4, jTextField_Title.getText());
                pststmt.setString(5, getCurDate());
                pststmt.setString(6, getDueDate());

                pststmt.execute();
                pststmt.close();

                PreparedStatement pst = conn.prepareStatement(dQuery);
                pst.execute();
                pst.close();
                
                Connection myConn = DBConnector.connectDB();
                String uQuery = "update book set availability='No' where book_id=" + jTextField_BookID.getText() ;
                PreparedStatement mypststmt = myConn.prepareStatement(uQuery);
                mypststmt.execute();
                System.out.println("Update Completed!");
                
                DefaultTableModel model = (DefaultTableModel)issueTable.getModel();
                model.setRowCount(0);
                showReserveList();
                
                JOptionPane.showMessageDialog(null, "Book Issued Successfully");
                
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_issueButtonMouseClicked

    private void studentIDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentIDFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_studentIDFieldActionPerformed
    
    public String getReturnDateSTR() {
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        Date date = Calendar.getInstance().getTime();
        String Date = df.format(date);
        return Date;
    }
    public String getDueDateSTR() {
        String query = "select * from student where book_id='" + bookIDTextField.getText() +"' and rb_id='" + studentIDField.getText() + "'";
        String store = "";
        try {
            conn = DBConnector.connectDB();
            pststmt = conn.prepareStatement(query);
            rs = pststmt.executeQuery();
            
            while (rs.next()) {
                store = rs.getString("due_date");
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        //System.out.println(store);
        return store;
    }
    
    public long getDiffDays() {
        SimpleDateFormat myFormat = new SimpleDateFormat("dd/MM/yyyy");
//        String inputString1 = "23 01 1997";
//        String inputString2 = "27 04 1997";
        long tmp = 0;
        try {
            Date date1 = myFormat.parse(getReturnDateSTR());
            Date date2 = myFormat.parse(getDueDateSTR());
            if (date1.after(date2)) {
                long diff = date1.getTime() - date2.getTime();
                tmp = TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
            }
        } catch (ParseException e) {
            e.printStackTrace();
        }
        //System.out.println(tmp);
        return tmp;
    }
    
    public double getFee() {
        double fee = 0.10;
        int overDue = (int) getDiffDays();
        double totalFee = fee * overDue;
        //System.out.println(totalFee);
        return totalFee;
    }
    
    public boolean checkList() {
        
        String query = "select * from student where book_id='" + bookIDTextField.getText() + "' and rb_id='" + studentIDField.getText() + "'";
        int count = 0;
        try {
            Connection conn = DBConnector.connectDB();
            PreparedStatement pst = conn.prepareStatement(query);
            ResultSet rs = pst.executeQuery();
            
            while (rs.next()) {
                count++;
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (count == 1)
            return true;
        return false;
    }
    
    public String checkReturn() {
        
        String query = "select * from student where book_id='" + bookIDTextField.getText() + "' and rb_id='" + studentIDField.getText() + "'";
        String str = null;
        try {
            Connection conn = DBConnector.connectDB();
            PreparedStatement pst = conn.prepareStatement(query);
            ResultSet rs = pst.executeQuery();
            
            while (rs.next()) {
                str = rs.getString("day_of_return");
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        return str;
    }
    
    
    
    private void returnBookButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_returnBookButtonMouseClicked
        // TODO add your handling code here:
        if (checkList() == true) {
            if (checkReturn().equalsIgnoreCase("null")) {
                try {
                    String uQuery = "update student set day_of_return='"+ getReturnDateSTR() +"', fee='" + getFee() +"' where book_id=" + bookIDTextField.getText() + " and rb_id=" + studentIDField.getText();
                    Connection conn = DBConnector.connectDB();
                    PreparedStatement pst = conn.prepareStatement(uQuery);
                    pst.execute();
                    pst.close();
                    System.out.println("Return Completed!");

                    Connection myConn = DBConnector.connectDB();
                    String u2Query = "update book set availability='Yes' where book_id=" + bookIDTextField.getText() ;
                    PreparedStatement mypststmt = myConn.prepareStatement(u2Query);
                    mypststmt.execute();
                    System.out.println("Update Completed!");

                    jLabel_overDue.setText("Over Due by " + Long.toString(getDiffDays()) + " day(s)");
                    jLabel_totalFee.setText("Total Fee: $" + String.valueOf(getFee()));

                    JOptionPane.showMessageDialog(null, "Book Returned Successfully");

                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Book Already Returned");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Book ID or Student ID is Incorrect");
        }
    }//GEN-LAST:event_returnBookButtonMouseClicked
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LibrarianPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LibrarianPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LibrarianPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibrarianPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LibrarianPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField authorTextField;
    private javax.swing.JTextField bookField;
    private javax.swing.JTextField bookIDTextField;
    private javax.swing.JButton checkBook;
    private javax.swing.JPanel checkBookPanel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField genreTextField;
    private javax.swing.JTextField isbnTextField;
    private javax.swing.JButton issueBook;
    private javax.swing.JPanel issueBookPanel;
    private javax.swing.JButton issueButton;
    private javax.swing.JTable issueTable;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_overDue;
    private javax.swing.JLabel jLabel_totalFee;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable_showBookList;
    private javax.swing.JTextField jTextField_BookID;
    private javax.swing.JTextField jTextField_ISBN;
    private javax.swing.JTextField jTextField_StudentID;
    private javax.swing.JTextField jTextField_Title;
    private javax.swing.JPanel librarianPagePanel;
    private javax.swing.JButton logoutButton;
    private javax.swing.JPanel navBarPanel;
    private javax.swing.JLabel navLabel;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JButton returnBook;
    private javax.swing.JButton returnBookButton;
    private javax.swing.JPanel returnBookPanel;
    private javax.swing.JTextField studentIDField;
    private javax.swing.JTextField titleTextField;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
